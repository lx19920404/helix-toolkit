using SharpDX;
using System;
using System.Collections.Concurrent;

namespace Baidu.Guoke.Controller
{
    public class UtilColor3D

    {
        public static ConcurrentDictionary<int, Color4> st_Intensity_Colors_Map_Dic = new ConcurrentDictionary<int, Color4>();


        static UInt32[] st_color_tab_intensity_argb = new UInt32[] {
            0xffFF0000, 0xffff0500, 0xffff0500, 0xffff0500, 0xffff0a00, 0xffff0b00, 0xffff0b00, 0xffff0c00,
            0xffff1200, 0xffff1200, 0xffff1200, 0xffff1200, 0xffff1800, 0xffff1900, 0xffff1900, 0xffff1a00,
            0xffff1f00, 0xffff1f00, 0xffff1f00, 0xffff1f00, 0xffff2500, 0xffff2600, 0xffff2600, 0xffff2700,
            0xffff2c00, 0xffff2c00, 0xffff2c00, 0xffff2c00, 0xffff3200, 0xffff3300, 0xffff3300, 0xffff3300,
            0xffff3800, 0xffff3900, 0xffff3900, 0xffff3a00, 0xffff4000, 0xffff4000, 0xffff4000, 0xffff4000,
            0xffff4600, 0xffff4700, 0xffff4700, 0xffff4800, 0xffff4d00, 0xffff4d00, 0xffff4d00, 0xffff4d00,
            0xffff5300, 0xffff5400, 0xffff5400, 0xffff5400, 0xffff5800, 0xffff5a00, 4294924800, 0xffff5a00,
            0xffff6000, 0xffff6100, 0xffff6100, 0xffff6100, 0xffff6600, 0xffff6700, 0xffff6700, 0xffff6700,
            0xffff6e00, 0xffff6e00, 0xffff6e00, 0xffff6e00, 0xffff7400, 0xffff7500, 0xffff7500, 0xffff7600,
            0xffff7b00, 0xffff7b00, 0xffff7b00, 0xffff7b00, 0xffff8100, 0xffff8200, 0xffff8200, 0xffff8200,
            0xffff8600, 0xffff8800, 0xffff8800, 0xffff8800, 0xffff8e00, 0xffff8f00, 0xffff8f00, 0xffff8f00,
            0xffff9400, 0xffff9500, 0xffff9500, 0xffff9500, 0xffff9b00, 0xffff9c00, 0xffff9c00, 0xffff9c00,
            0xffffa100, 0xffffa200, 0xffffa200, 0xffffa300, 0xffffa900, 0xffffa900, 4294945024, 0xffffa900,
            0xffffaf00, 0xffffb000, 0xffffb000, 0xffffb000, 0xffffb400, 0xffffb600, 0xffffb600, 0xffffb600,
            0xffffbc00, 0xffffbd00, 0xffffbd00, 0xffffbd00, 0xffffc100, 0xffffc300, 0xffffc300, 0xffffc300,
            0xffffc900, 0xffffca00, 0xffffca00, 0xffffca00, 0xffffcf00, 0xffffd000, 0xffffd000, 0xffffd000,
            0xffffd700, 0xffffd700, 0xffffd700, 0xffffd700, 0xffffdd00, 0xffffde00, 0xffffde00, 0xffffde00,
            0xffffe200, 0xffffe400, 0xffffe400, 0xffffe400, 0xffffea00, 0xffffeb00, 0xffffeb00, 0xffffeb00,
            0xffffef00, 0xfffff100, 0xfffff100, 0xfffff100, 0xfffff700, 0xfffff800, 0xfffff800, 0xfffff800,
            0xfffffd00, 0xfffffe00, 0xfffffe00, 0xfffffe00, 0xffeeff00, 0xffe1ff00, 0xffe3ff00, 0xffe4ff00,
            0xffcbff00, 0xffc4ff00, 0xffc5ff00, 0xffc7ff00, 0xffb1ff00, 0xffa4ff00, 0xffa6ff00, 0xffa6ff00,
            0xff8cff00, 0xff86ff00, 0xff87ff00, 0xff89ff00, 0xff72ff00, 0xff66ff00, 0xff68ff00, 0xff67ff00,
            0xff4eff00, 0xff49ff00, 0xff4aff00, 0xff4bff00, 0xff33ff00, 0xff2aff00, 0xff2bff00, 0xff2dff00,
            0xff19ff00, 0xff0aff00, 0xff0cff00, 0xff0cff00, 0xff03ff0e, 0xff00ff13, 0xff00ff12, 0xff00ff10,
            0xff00ff25, 0xff00ff33, 0xff00ff31, 0xff00ff31, 0xff00ff4a, 0xff00ff51, 0xff00ff50, 0xff00ff4e,
            0xff00ff65, 0xff00ff71, 0xff00ff6f, 0xff00ff6f, 0xff00ff89, 0xff00ff8e, 0xff00ff8d, 0xff00ff8b,
            0xff00ffa3, 0xff00ffae, 0xff00ffac, 0xff00ffaa, 0xff00ffbd, 0xff00ffcd, 0xff00ffcb, 0xff00ffca,
            0xff00ffe2, 0xff00ffeb, 0xff00ffea, 0xff00ffe9, 0xff00faf7, 0xff00f5ff, 0xff00f6ff, 0xff00f7ff,
            0xff00ddff, 0xff00d6ff, 0xff00d7ff, 0xff00d9ff, 0xff00c3ff, 0xff00b6ff, 0xff00b8ff, 0xff00baff,
            0xff00aaff, 0xff0098ff, 0xff009aff, 0xff009cff, 0xff0085ff, 0xff0079ff, 0xff007bff, 0xff007dff,
            0xff006bff, 0xff005aff, 0xff005cff, 0xff005dff, 0xff0045ff, 0xff003cff, 0xff003dff, 0xff003fff,
            0xff002cff, 0xff001dff, 0xff001fff, 0xff0020ff, 0xff0007ff, 0xff0000ff, 0xff0000ff, 0xff0000ff
        };

        static UInt32[] st_color_tab_intensity_argb_l4 = new UInt32[]{
            0xffff6000, 0xffff6100, 0xffff6100, 0xffff6100, 0xffff6600, 0xffff6700, 0xffff6700, 0xffff6700,   //0-7
            0xffffd700, 0xffffd700, 0xffffd700, 0xffffd700, 0xffffdd00, 0xffffde00, 0xffffde00, 0xffffde00,   //8-15
            0xffff1f00, 0xfffff100, 0xfffff100, 0xfffff100, 0xfffff700, 0xfffff800, 0xfffff800, 0xfffffd00,    //16-23
            0xff4bff00, 0xff33ff00, 0xff0aff00, 0xff0cff00, 0xff00ff65, 0xff00ff71, 0xff00ffea, 0xff00f5ff,   //24-31
            0xff00f6ff, 0xff009cff, 0xff0079ff, 0xff007dff, 0xff005aff, 0xff005dff, 0xff003cff, 0xff003fff,   //32-39
            0xff001dff, 0xff0020ff, 0xff0000ff, 0xff0000ff, 0xff0000ff, 0xff0007ff, 0xff001fff, 0xff002cff,   //40-47
            0xff003dff, 0xff0045ff, 0xff005cff, 0xff006bff, 0xff007bff, 0xff0085ff, 0xff0098ff, 0xff00aaff,   //48-55
            0xff00baff, 0xff00b8ff, 0xff00b6ff, 0xff00c3ff, 0xff00d9ff, 0xff00d7ff, 0xff00d6ff, 0xff00ddff,   //56-63
            0xff00f7ff, 0xff00f5ff, 0xff00faf7, 0xff00ffe9, 0xff00ffeb, 0xff00ffe2, 0xff00ffca, 0xff00ffcb,   //64-71
            0xff00ffcd, 0xff00ffbd, 0xff00ffaa, 0xff00ffac, 0xff00ffae, 0xff00ffa3, 0xff00ff8b, 0xffff8200,   //72-79
            0xfff3f3f3, 0xfff3f3f3, 0xfff3f3f3, 0xfff4f4f4, 0xfff4f4f4, 0xfff4f4f4, 0xfff5f5f5, 0xfff5f5f5,   //80-87
            0xfff5f5f5, 0xfff6f6f6, 0xfff6f6f6, 0xfff6f6f6, 0xfff7f7f7, 0xfff7f7f7, 0xfff7f7f7, 0xfff8f8f8,   //88-95
            0xfff8f8f8, 0xfff8f8f8, 0xfff9f9f9, 0xfff9f9f9, 0xfff9f9f9, 0xfff9f9f9, 0xfffafafa, 0xfffafafa,   //96-103
            0xfffafafa, 0xfffbfbfb, 0xfffbfbfb, 0xfffbfbfb, 0xfffcfcfc, 0xfffcfcfc, 0xfffcfcfc, 0xfffdfdfd,   //104-111
            0xfffdfdfd, 0xfffdfdfd, 0xfffefefe, 0xfffefefe, 0xfffefefe, 0xffffffff, 0xffffffff, 0xffffffff,   //112-119
            0xfffffefe, 0xfffffefe, 0xfffffefe, 0xfffdfcfc, 0xfffdfcfc, 0xfffdfcfc, 0xfffcfbfb, 0xfffcfbfb,   //120-127
            0xfffcfbfb, 0xfffcfbfb, 0xfffbfafa, 0xfffbfafa, 0xfffbfafa, 0xfffaf9f9, 0xfffaf9f9, 0xfffaf9f9,   //128-135
            0xffffd000, 0xffffd000, 0xffffd000, 0xffffcf00, 0xffffca00, 0xffffca00, 0xffffca00, 0xffffc900,   //136-143
            0xffffc300, 0xffffc300, 0xffffc300, 0xffffc100, 0xffffbd00, 0xffffbd00, 0xffffbd00, 0xffffbc00,   //144-151
            0xffffb600, 0xffffb600, 0xffffb600, 0xffffb400, 0xffffb000, 0xffffb000, 0xffffb000, 0xffffaf00,   //152-159
            0xffffa900, 0xffffa900, 0xffffa900, 0xffffa900, 0xffffa300, 0xffffa200, 0xffffa200, 0xffffa100,   //160-167
            0xffff9c00, 0xffff9c00, 0xffff9c00, 0xffff9b00, 0xffff9500, 0xffff9500, 0xffff9500, 0xffff9400,   //168-175
            0xffff8f00, 0xffff8f00, 0xffff8f00, 0xffff8e00, 0xffff8800, 0xffff8800, 0xffff8800, 0xffff8600,   //176-183
            0xffff8200, 0xffff8200, 0xffff8200, 0xffff8100, 0xffff7b00, 0xffff7b00, 0xffff7b00, 0xffff7b00,   //184-191
            0xffff7600, 0xffff7500, 0xffff7500, 0xffff7400, 0xffff6e00, 0xffff6e00, 0xffff6e00, 0xffff6e00,   //192-199
            0xffff5a00, 0xffff5a00, 0xffff5a00, 0xffff5800, 0xffff5400, 0xffff5400, 0xffff5400, 0xffff5300,   //200-207
            0xffff4d00, 0xffff4d00, 0xffff4d00, 0xffff4d00, 0xffff4800, 0xffff4700, 0xffff4700, 0xffff4600,//208-215
            0xffff4000, 0xffff4000, 0xffff4000, 0xffff4000, 0xffff3a00, 0xffff3900, 0xffff3900, 0xffff3800,//216-223
            0xffff3300, 0xffff3300, 0xffff3300, 0xffff3200, 0xffff3200, 0xffff2c00, 0xffff2c00, 0xffff2c00,//224-231
            0xffff2700, 0xffff2600, 0xffff2600, 0xffff2500, 0xffff2500, 0xffff1f00, 0xffff1f00, 0xffff1f00,//232-239
            0xffff1a00, 0xffff1900, 0xffff1900, 0xffff1800, 0xffff1200, 0xffff1200, 0xffff1200, 0xffff1200,//240-247
            0xffff0c00, 0xffff0b00, 0xffff0b00, 0xffff0a00, 0xffff0500, 0xffff0500, 0xffff0500, 0xffFF0000//248-255
        };

        public static bool st_UseL4 = false;


        public static void Init_Intensity_Colors_Map()
        {
            int i = 0;
            for (i = 255; i >= 0; i--)
            {
                UInt32 item = st_color_tab_intensity_argb[i];
                int key = 255 - i;

                if (st_UseL4)
                {
                    item = st_color_tab_intensity_argb_l4[i];
                    key = i;
                }
                float blue = (item & 0xFF) / 255.0f;
                float green = ((item >> 8) & 0xFF) / 255.0f;
                float red = ((item >> 16) & 0xFF) / 255.0f;
                float alpha = ((item >> 24) & 0xFF) / 255.0f;
                Color4 color = new Color4(red, green, blue, alpha);

                st_Intensity_Colors_Map_Dic.TryAdd(key, color);
            }
        }
    }
}
